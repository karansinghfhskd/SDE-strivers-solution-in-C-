#include <cmath>

long long power(long long x, int n) {
    long long result = 1;
    for (int i = 0; i < n; i++) {
        result *= x;
    }
    return result;
}

int NthRoot(int n, int m) {
    // Edge case for m == 0
    if (m == 0) return 0;

    // Initialize the binary search bounds
    int low = 1;
    int high = m;
    
    while (low <= high) {
        int mid = (low + high) / 2;
        long long midPow = power(mid, n);

        if (midPow == m) {
            return mid; // Find the nth root
        } else if (midPow < m) {
            low = mid + 1; // Search in the right part 
        } else {
            high = mid - 1; // Search in the left part
        }
    }

    return -1; // If no integer nth root exists
}
